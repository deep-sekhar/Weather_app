{"version":3,"sources":["comp/main.js","App.js","reportWebVitals.js","index.js"],"names":["MainPart","useState","RStatus","setRStatus","city","setCity","cityname","setCityname","searchcity","setSearchcity","TypedCity","setTypedCity","useEffect","a","url","fetch","response","statusText","status","json","main","name","fetchAPI","className","action","onSubmit","e","preventDefault","value","onChange","target","type","id","feels_like","temp","temp_min","temp_max","humidity","pressure","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OA6GeA,EAtGE,WAEb,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAgCJ,mBAAS,IAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KACA,EAAoCN,mBAAS,YAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KACA,EAAkCR,mBAAS,YAA3C,mBAAOS,EAAP,KAAkBC,EAAlB,KA8CA,OApCAC,qBAAU,YACQ,uCAAG,gCAAAC,EAAA,6DACPC,EADO,4DACoDN,EADpD,iEAEUO,MAAMD,GAFhB,UAEPE,EAFO,OAIbb,EAAWa,EAASC,cAEhBD,EAASE,QAAQ,KAAKF,EAASE,OAAO,KAN7B,iCAOUF,EAASG,OAPnB,OAOHA,EAPG,OAQTd,EAAQc,EAAKC,MACbb,EAAYY,EAAKE,MATR,yCAYUL,EAASG,OAZnB,eAaTd,EAAQ,IAbC,4CAAH,qDAgCdiB,KACF,CAACd,IAGC,mCACA,sBAAKe,UAAU,MAAf,UACI,uBAAMC,OAAO,GAAGC,SA/CF,SAACC,GACnBA,EAAEC,iBACEjB,GACAD,EAAcC,IA4Cd,UACA,qBAAKa,UAAU,YAAf,SACA,uBAAOK,MAAOlB,EAAWmB,SAAU,SAAAH,GAAC,OAAEf,EAAae,EAAEI,OAAOF,QAAQG,KAAK,SAASR,UAAU,iBAE5F,qBAAKA,UAAU,YAAf,SACA,wBAAQS,GAAG,MAAMD,KAAK,SAAtB,yBAGH3B,EACD,sBAAKmB,UAAU,aAAf,UACI,qBAAIA,UAAU,YAAd,UACA,mBAAGA,UAAU,8BADb,IACmDjB,KAEnD,qBAAIiB,UAAU,OAAd,wBACgBnB,EAAK6B,WADrB,WAGA,qBAAIV,UAAU,OAAd,UACCnB,EAAK8B,KADN,YAGA,qBAAIX,UAAU,cAAd,kBACMnB,EAAK+B,SADX,eACkC/B,EAAKgC,SADvC,WAGA,2CACchC,EAAKiC,YAEnB,2CACcjC,EAAKkC,eAGvB,sBAAKf,UAAU,OAAf,UACI,oBAAIA,UAAU,WAAd,4BAGA,wCACWrB,QAKf,qBAAKqB,UAAU,cACf,qBAAKA,UAAU,cACf,qBAAKA,UAAU,sBC3FRgB,MAVf,WACE,OACE,qBAAKhB,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,EAAD,SCMOiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ad22e416.chunk.js","sourcesContent":["\r\nimport \"./style/style.css\"\r\nimport React, { useState, useEffect } from 'react'\r\n///////////////////////\r\n// testing\r\n// import Data from './data.json'\r\n\r\nconst MainPart = ()=>{\r\n\r\n    const [RStatus, setRStatus] = useState(\"\");\r\n    const [city, setCity] = useState(\"\");\r\n    const [cityname, setCityname] = useState(\"\");\r\n    const [searchcity, setSearchcity] = useState(\"Durgapur\");\r\n    const [TypedCity, setTypedCity] = useState(\"Durgapur\");\r\n\r\n    const submitHandler = (e)=>{\r\n        e.preventDefault();\r\n        if (TypedCity) {\r\n            setSearchcity(TypedCity);\r\n        }\r\n    }\r\n\r\n    // FETCH API \r\n    useEffect(()=>{\r\n        const fetchAPI = async()=>{\r\n            const url = `https://api.openweathermap.org/data/2.5/weather?q=${searchcity}&appid=676c605eb8ddc317783f91dd9cb8f02d&units=metric`;\r\n            const response = await fetch(url);\r\n\r\n            setRStatus(response.statusText);\r\n\r\n            if (response.status>=200||response.status<300) {\r\n                const json = await response.json();\r\n                setCity(json.main);\r\n                setCityname(json.name);\r\n            }\r\n            else{\r\n                const json = await response.json();\r\n                setCity(\"\");\r\n            }\r\n\r\n            // //////////////////////////////\r\n            // testing works: ---- \r\n\r\n            // const url = `https://api.openweathermap.org/data/2.5/weather?q=${searchcity}&appid=676c605eb8ddc3f17783f91dd9cb8f02d&units=metric`;\r\n            \r\n            // console.log(\"searching\")\r\n            // const url = `./data.json`;\r\n            // const json = {Data};\r\n            // console.log(json);\r\n            \r\n            // setCityname(json.Data.name);\r\n            // setCity(json.Data.main);\r\n            // console.log(cityname);\r\n            // console.log(city);\r\n\r\n        };\r\n        fetchAPI();\r\n    },[searchcity])\r\n\r\n    return(\r\n        <>\r\n        <div className=\"box\">\r\n            <form action=\"\" onSubmit={submitHandler}>\r\n            <div className=\"inputData\">\r\n            <input value={TypedCity} onChange={e=>setTypedCity(e.target.value)} type=\"search\" className=\"inputField\"/>\r\n            </div>\r\n            <div className=\"btnholder\">\r\n            <button id=\"btn\" type=\"submit\">Search</button>\r\n            </div>\r\n            </form>\r\n        {city?\r\n        <div className=\"info float\">\r\n            <h4 className=\"location \">\r\n            <i className=\"fas fa-street-view fa-sm \"></i>{` `}{cityname}\r\n            </h4>\r\n            <h4 className=\"feel\">\r\n                Feels like:{city.feels_like}&deg;c\r\n            </h4>\r\n            <h1 className=\"temp\">\r\n            {city.temp} &deg;c\r\n            </h1>\r\n            <h3 className=\"tempmin_max\">\r\n            Min: {city.temp_min}&deg;c | Max:{city.temp_max}&deg;c\r\n            </h3>\r\n            <h4>\r\n                Humidity:{city.humidity}\r\n            </h4>\r\n            <h4>\r\n                Pressure:{city.pressure}\r\n            </h4>\r\n        </div>:\r\n        <div className=\"info\">\r\n            <h4 className=\"location\">\r\n                No data found.\r\n            </h4>\r\n            <h4>\r\n                Error:{RStatus}\r\n            </h4>\r\n        </div>\r\n        }\r\n\r\n        <div className=\"wave -one\"></div>\r\n        <div className=\"wave -two\"></div>\r\n        <div className=\"wave -three\"></div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPart;","import MainPart from './comp/main'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <MainPart/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}